{
  "root": true,
  "env": {
    "es6": true,
    "node": true,
    "browser": true
  },
  "parser": "vue-eslint-parser",
  "parserOptions": {
    "parser": "@typescript-eslint/parser",
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "extends": ["eslint:recommended", "plugin:vue/vue3-essential", "plugin:@typescript-eslint/recommended"],
  "plugins": ["vue", "@typescript-eslint"],
  "rules": {
    /** vue */
    "vue/multi-word-component-names": "off", // 必须定义组件名称
    "vue/singleline-html-element-content-newline": [
      "error",
      {
        "ignoreWhenNoAttributes": true,
        "ignoreWhenEmpty": true,
        "ignores": ["pre", "textarea"]
      }
    ], // 强制元素内单行内容换行
    "vue/multiline-html-element-content-newline": [
      "error",
      {
        "ignoreWhenEmpty": true,
        "ignores": ["pre", "textarea"],
        "allowEmptyLines": false
      }
    ], // 强制元素内多行内容换行
    "vue/no-v-html": "off", // 允许v-html
    "vue/html-indent": [
      "error",
      2,
      {
        "alignAttributesVertically": true
      }
    ], // html缩进
    "vue/component-definition-name-casing": ["error", "kebab-case"], // 定义组件名风格
    "vue/component-name-in-template-casing": [
      "error",
      "kebab-case",
      {
        "registeredComponentsOnly": false
      }
    ], // template内组件名风格
    "vue/html-self-closing": [
      "error",
      {
        "html": {
          "void": "never",
          "normal": "always",
          "component": "always"
        },
        "svg": "always",
        "math": "always"
      }
    ], // 无内容标签自动闭合
    "vue/no-multi-spaces": ["error"], // 不允许多余的空格
    "vue/max-attributes-per-line": [
      "error",
      {
        "singleline": {
          "max": 6
        },
        "multiline": {
          "max": 1
        }
      }
    ], // 多属性换行
    "vue/no-template-shadow": ["error"], // 禁止嵌套相同的v-for循环变量
    "vue/block-tag-newline": [
      "error",
      {
        "singleline": "never",
        "multiline": "always"
      }
    ], // 块级作用域在有多行情况下需要新行
    "vue/prefer-separate-static-class": ["error"], // 静态类名与动态类名分离
    "vue/attributes-order": [
      "error",
      {
        "order": ["DEFINITION", "LIST_RENDERING", "CONDITIONALS", "RENDER_MODIFIERS", "GLOBAL", ["UNIQUE", "SLOT"], "TWO_WAY_BINDING", "OTHER_DIRECTIVES", "OTHER_ATTR", "EVENTS", "CONTENT"],
        "alphabetical": false
      }
    ], // 强制属性顺序
    "vue/html-closing-bracket-spacing": ["error", {
      "startTag": "never",
      "endTag": "never",
      "selfClosingTag": "always"
    }],
    /** js */
    "accessor-pairs": "error", //在对象中使用getter/setter
    "arrow-spacing": [
      "error",
      {
        "before": true,
        "after": true
      }
    ], //=>的前/后括号
    "block-spacing": ["error", "always"], //块是否需要空格
    // if while function 后面的{必须与if在同一行，java风格。
    "brace-style": [
      "error",
      "1tbs",
      {
        "allowSingleLine": true
      }
    ],
    //强制驼峰法命名
    "camelcase": [
      "off",
      {
        "properties": "always"
      }
    ],
    // 数组和对象键值对最后一个逗号， never参数：不能带末尾的逗号, always参数：必须带末尾的逗号，
    // always-multiline：多行模式必须带逗号，单行模式不能带逗号
    "comma-dangle": ["error", "never"],
    // 控制逗号前后的空格
    "comma-spacing": [
      "error",
      {
        "before": false,
        "after": true
      }
    ],
    "comma-style": ["error", "last"], // 控制逗号在行尾出现还是在行首出现
    // 强制在子类构造函数中用super()调用父类构造函数，TypeScrip的编译器也会提示
    "constructor-super": "error",
    "curly": ["error", "multi-line"], // 强制所有控制语句使用一致的括号风格
    // 强制object.key 中 . 的位置，参数:
    // property，"."号应与属性在同一行
    // object, "." 号应与对象名在同一行
    "dot-location": ["error", "property"],
    "eol-last": "error", // 文件末尾强制换行
    "eqeqeq": [
      "error",
      "always",
      {
        "null": "ignore"
      }
    ], // 使用 === 替代 ==
    "generator-star-spacing": [
      "error",
      {
        "before": true,
        "after": true
      }
    ], //生成器函数*的前后空格
    "handle-callback-err": ["error", "^(err|error)$"], //nodejs 处理错误
    "indent": [
      // 设置空格为4与Volar统一
      "error",
      2,
      {
        "SwitchCase": 1
      }
    ], //缩进风格
    "jsx-quotes": ["error", "prefer-single"], // JSX 属性中一致使用双引号或单引号
    //对象字面量中冒号的前后空格
    "key-spacing": [
      "error",
      {
        "beforeColon": false,
        "afterColon": true
      }
    ],
    "keyword-spacing": [
      "error",
      {
        "before": true,
        "after": true
      }
    ],
    //函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用
    "new-cap": [
      "error",
      {
        "newIsCap": true,
        "capIsNew": false
      }
    ],
    "new-parens": "error", //new时必须加小括号
    "no-array-constructor": "error", //禁止使用数组构造器
    "no-caller": "error", //禁止使用arguments.caller或arguments.callee
    "no-console": "off", //禁止使用console
    "no-class-assign": "error", //禁止给类赋值
    "no-cond-assign": "error", //禁止在条件表达式中使用赋值语句
    "no-const-assign": "error", //禁止修改const声明的变量
    "no-control-regex": "off", //禁止在正则表达式中使用控制字符
    "no-delete-var": "error", //不能对var声明的变量使用delete操作符
    "no-dupe-args": "error", //函数参数不能重复
    "no-dupe-class-members": "error", //不允许类中出现重复的声明
    "no-dupe-keys": "error", //在创建对象字面量时不允许键重复 {a:1,a:1}
    "no-duplicate-case": "error", //switch中的case标签不能重复
    "no-empty-character-class": "error", //正则表达式中的[]内容不能为空
    "no-empty-pattern": "error", // 禁止使用空解构模式
    "no-eval": "error", //禁止使用eval
    "no-ex-assign": "error", //禁止给catch语句中的异常参数赋值
    "no-extend-native": "error", //禁止扩展native对象
    "no-extra-bind": "error", //禁止不必要的函数绑定
    "no-extra-boolean-cast": "error", //禁止不必要的bool转换
    "no-extra-parens": ["error", "functions"], //禁止非必要的括号
    "no-fallthrough": "error", //禁止switch穿透
    "no-floating-decimal": "error", //禁止省略浮点数中的0 .5 3.
    "no-func-assign": "error", //禁止重复的函数声明
    "no-implied-eval": "error", //禁止使用隐式eval
    "no-inner-declarations": ["error", "functions"], //禁止在块语句中使用声明（变量或函数）
    "no-invalid-regexp": "error", //禁止无效的正则表达式
    "no-irregular-whitespace": "error", //不能有不规则的空格
    "no-iterator": "error", //禁止使用__iterator__ 属性
    "no-label-var": "error", //label名不能与var声明的变量名相同
    "no-labels": [
      //禁止标签声明
      "error",
      {
        "allowLoop": false,
        "allowSwitch": false
      }
    ],
    "no-lone-blocks": "error", //禁止不必要的嵌套块
    "no-mixed-spaces-and-tabs": "error", //禁止混用tab和空格
    "no-multi-spaces": "error", //不能用多余的空格
    "no-multi-str": "error", //字符串不能用\换行
    "no-multiple-empty-lines": [
      //空行最多不能超过1行
      "error",
      {
        "max": 1
      }
    ],
    "no-native-reassign": "error", //不能重写native对象
    "no-negated-in-lhs": "error", //in 操作符的左边不能有!
    "no-new-object": "error", //禁止使用new Object()
    "no-new-require": "error", //禁止使用new require
    "no-new-symbol": "error", //禁止使用new symbol
    "no-new-wrappers": "error", //禁止使用new创建包装实例，new String new Boolean new Number
    "no-obj-calls": "error", //不能调用内置的全局对象，比如Math() JSON()
    "no-octal": "error", //禁止使用八进制数字
    "no-octal-escape": "error", //禁止使用八进制转义序列
    "no-path-concat": "error", //node中不能使用__dirname或__filename做路径拼接
    "no-proto": "error", //禁止使用__proto__属性
    "no-redeclare": "error", //禁止重复声明变量
    "no-regex-spaces": "error", //禁止在正则表达式字面量中使用多个空格 /foo bar/
    "no-return-assign": ["error", "except-parens"], //return 语句中不能有赋值表达式
    "no-self-assign": "error", //自我分配
    "no-self-compare": "error", //不能比较自身
    "no-sequences": "error", //禁止使用逗号运算符
    "no-shadow-restricted-names": "error", //严格模式中规定的限制标识符不能作为声明时的变量名使用
    "no-spaced-func": "error", //函数调用时 函数名与()之间不能有空格
    "no-sparse-arrays": "error", //禁止稀疏数组， [1,,2]
    "no-this-before-super": "error", //在调用super()之前不能使用this或super
    "no-throw-literal": "error", //禁止抛出字面量错误 throw "error";
    "no-trailing-spaces": "error", //一行结束后面不要有空格
    "no-undef": "error", //不能有未定义的变量
    "no-undef-init": "error", //变量初始化时不能直接给它赋值为undefined
    "no-unexpected-multiline": "error", //避免多行表达式
    "no-unmodified-loop-condition": "error", //检查引用是否在循环中被修改
    "no-unneeded-ternary": [
      // 禁止可以在有更简单的可替代的表达式时使用三元操作符
      "error",
      {
        "defaultAssignment": false
      }
    ],
    "no-unreachable": "error", //不能有无法执行的代码
    "no-unsafe-finally": "error", // 禁止对关系运算符的左操作数使用否定操作符，原no-negated-in-lhs已被此替换
    "no-unused-vars": [
      //不能有声明后未被使用的变量或参数
      "error",
      {
        "vars": "all",
        "args": "none"
      }
    ],
    "no-useless-call": "error", //禁止不必要的call和apply
    "no-useless-computed-key": "error", //没有必要使用带文字的计算属性
    "no-useless-constructor": "error", //可以在不改变类的工作方式的情况下安全地移除的类构造函数
    "no-useless-escape": "off", // 禁用不必要的转义字符
    "no-whitespace-before-property": "error", // 禁止属性前有空白
    "no-with": "error", //禁用with
    "one-var": [
      //连续声明
      "error",
      {
        "initialized": "never"
      }
    ],
    "operator-linebreak": [
      //换行时运算符在行尾还是行首
      "error",
      "after",
      {
        "overrides": {
          "?": "before",
          ":": "before"
        }
      }
    ],
    "padded-blocks": ["error", "never"], //块语句内行首行尾是否要空行
    "quotes": [
      //引号类型 `` "" ""
      "error",
      "single",
      {
        "avoidEscape": true,
        "allowTemplateLiterals": true
      }
    ],
    "semi": ["error", "always"], //语句强制分号结尾
    "semi-spacing": [
      //分号前后空格
      "error",
      {
        "before": false,
        "after": true
      }
    ],
    "space-before-blocks": ["error", "always"], //不以新行开始的块{前面要不要有空格
    "space-before-function-paren": ["error", "never"], //函数定义时括号前面要不要有空格
    "space-in-parens": ["error", "never"], //小括号里面要不要有空格
    "space-infix-ops": "error", //中缀操作符周围要不要有空格
    "space-unary-ops": [
      //一元运算符的前/后要不要加空格
      "error",
      {
        "words": true,
        "nonwords": false
      }
    ],
    "spaced-comment": [
      //注释风格不要有空格什么的
      "error",
      "always",
      {
        "markers": ["global", "globals", "eslint", "eslint-disable", "*package", "!", ","]
      }
    ],
    "template-curly-spacing": ["error", "never"], // 要求或禁止模板字符串中的嵌入表达式周围空格的使用
    "use-isnan": "error", //禁止比较时使用NaN，只能用isNaN()
    "valid-typeof": "error", //必须使用合法的typeof的值
    "wrap-iife": ["error", "any"], //立即执行函数表达式的小括号风格
    "yield-star-spacing": ["error", "both"], // 强制在 yield* 表达式中 * 周围使用空格
    "yoda": ["error", "never"], //禁止尤达条件
    "prefer-const": "error", //首选const
    "no-debugger": "error", //禁止使用debugger
    "object-curly-spacing": [
      //大括号内是否允许不必要的空格
      "error",
      "always",
      {
        "objectsInObjects": false
      }
    ],
    "array-bracket-spacing": ["error", "never"] //是否允许非空数组里面有多余的空格
  }
}
